#!/usr/bin/env node

// Parse arguments
var args = process.argv.slice(2);
if (args.length > 1) {
  console.error('usage: sparql-to-json query.sparql');
  return process.exit(1);
}

var fs = require('fs'),
    SparqlParser = require('../sparql').Parser;

// Parse and display the query
var query = '', source = args[0] ? fs.createReadStream(args[0]) : process.stdin;
source.setEncoding('utf8');
source.on('data', function (data) { query += data; });
source.on('end', function () {
  var parseTree = new SparqlParser().parse(query);
  function termReplacer(key, value) {
    if (isQuad(value)) {
      // Workaround for N3 Quad.toJSON() missing `termType` property
      return {termType: 'Quad', ...value};
    }
    return value;
  };
  process.stdout.write(JSON.stringify(parseTree, termReplacer, '  ') + '\n');
});

function isQuad(value) {
  return value && typeof value === 'object'
    && !!value.subject
    && !!value.predicate
    && !!value.object
    && !!value.graph;
}
